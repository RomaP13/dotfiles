customCommands:
  - key: "n"
    description: "Create a new branch"
    context: "localBranches"
    prompts:
      - type: "menu"
        title: "What kind of branch is it?"
        key: "BranchType"
        options:
          - name: "feature"
            description: "for adding new functionality or capabilities to the codebase"
            value: "feature"
          - name: "refactor"
            description: "for improving existing code without adding new features"
            value: "refactor"
          - name: "fix"
            description: "for correcting bugs or unexpected behavior"
            value: "fix"
          - name: "chore"
            description: "for routine tasks, maintenance, or updates that don't affect the core codebase(dependencies, config)"
            value: "chore"
          - name: "docs"
            description: "for adding or updating documentation"
            value: "docs"
          - name: "test"
            description: "for adding or improving tests without changing the codebase"
            value: "test"
          - name: "experiment"
            description: "for testing idea or approach that may not be merged"
            value: "experiment"
          - name: "hotfix"
            description: "for urgent fixes that need to be deployed quickly, often directly to production"
            value: "hotfix"
          - name: "release"
            description: "for preparing a new production release"
            value: "release"
      - type: "input"
        title: "What is the new branch name?"
        key: "BranchName"
        initialValue: ""
    command: "git checkout -b {{.Form.BranchType}}/{{.Form.BranchName}}"
    loadingText: "Creating branch"
  - key: "U"
    description: "Update committer date with author date"
    context: "commits"
    prompts:
      - type: "confirm"
        title: "Update the committer date for new commits in the current branch"
        body: "You're trying to update the committer date for all commits in the current branch with the author date. Are you sure?"
    command: >
      bash -c '
        if git status --porcelain | grep .; then
          git stash push -u -m "temp-stash-for-rebase";
          stash_applied=true;
        else
          stash_applied=false;
        fi;
        git rebase --committer-date-is-author-date $(git merge-base main HEAD) &&
        if [ "$stash_applied" = true ]; then
          git stash pop;
        fi
      '
    output: log
git:
  merging:
    args: "--no-ff"
